@import "variable.less";

/**
 * left     -> lt
 * right    -> rt
 * top      -> tp
 * bottom   -> bt 
 *
 * padding  -> pd
 * margin   -> mg
 * border   -> bd 
 * outline  -> ot
 *
 * pl       -> pull
 * cl       -> clear
 *
 * of       -> overflow
 * hd       -> hidden
 * ot       -> auto
 * sl       -> scroll
 *
 * w        -> width
 * h        -> height
 *
 * udl      -> underline
 * orl      -> overline
 * thl      -> throughline
 * nl       -> noneline
 *
 * mxs      -> mobile x-small
 * ms       -> mobile small
 * mm       -> mobile middle
 * ml       -> mobile large
 * mxl      -> mobile x-large
 * xs       -> pc x-small
 * s        -> pc small
 * m        -> pc middle
 * l        -> pc large
 * xl       -> pc x-large
 */

.media-select ( @tag, @value, @min ) when ( @min <= 0 ) {
    @{tag} {
        @value();
    }
}

.media-select ( @tag, @value, @min ) when ( @min > 0 ) {
    @{tag} {
        @media ( min-width: @min ) {
            @value();
        }
    }
}

.make-classes () {
    @cl : ~".";
    @min : 0px;
    .make-classes( @cl, @min );
}

.make-classes ( @class, @min ) when ( iskeyword( @class ) ) {
    @cl : ~".@{class}-";
    .make-classes( @cl, @min );
}

.make-classes ( @cl, @min ) when ( isstring( @cl ) ) {
    // display;
    .media-select( ~"@{cl}none", { display: none }, @min );
    .media-select( ~"@{cl}block", { display: block }, @min );
    .media-select( ~"@{cl}inline", { display: inline }, @min );
    .media-select( ~"@{cl}inline-block", { display: inline-block }, @min );
    .media-select( ~"@{cl}table", { display: table }, @min );
    .media-select( ~"@{cl}flex", {
        display: -webkit-flex;
        display: -moz-flex;
        display: flex;

        // item justify
        &.space-between {
            -webkit-justify-content: space-between;
            justify-content: space-between;
        }

        &.center {
            -webkit-justify-content: center;
            justify-content: center;
        }
        
        &.start {
            -webkit-justify-content: flex-start;
            justify-content: flex-start;
        }

        &.end {
            -webkit-justify-content: flex-end;
            justify-content: flex-end;
        }

        // item align
        &.align-center {
            -webkit-align-items: center;
            align-items: center;
        }

        &.align-start {
            -webkit-align-items: flex-start;
            align-items: flex-start;
        }

        &.align-end {
            -webkit-align-items: flex-end;
            align-items: flex-end;
        }

        // item wrap
        &.wrap {
            -webkit-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        &.column {
            -webkit-flex-direction: column;
            flex-direction: column;
        }
    } , @min );

    .media-select( ~"@{cl}display-unset", {
        display: inherit;
        display: initial;
        display: unset;
    }, @min );

    .media-select( ~"@{cl}block-center", {
        display: block;
        margin-left: auto;
        margin-right: auto;
    }, @min );
    .media-select( ~"@{cl}vertical-center", {
        display: table-cell;
        vertical-align: middle;
    }, @min );
   
    .media-select( ~"@{cl}text-center", { text-align: center; }, @min );
    .media-select( ~"@{cl}text-left", { text-align: left; }, @min );
    .media-select( ~"@{cl}text-right", { text-align: right; }, @min );

    // position
    .media-select( ~"@{cl}static", { position: static; }, @min );
    .media-select( ~"@{cl}absolute", { position: absolute; }, @min );
    .media-select( ~"@{cl}relative", { position: relative; }, @min );
    .media-select( ~"@{cl}fixed", { position: fixed; }, @min );

    .media-select( ~"@{cl}left", { left : 0px }, @min );
    .media-select( ~"@{cl}right", { right: 0px }, @min );
    .media-select( ~"@{cl}top", { top: 0px }, @min );
    .media-select( ~"@{cl}bottom", { bottom: 0px }, @min );

    // z-index levels.
    .media-select( ~"@{cl}z-higher-then-your-dont-where-to-go",   { z-index: 9999999999999999999; }, @min );
    .media-select( ~"@{cl}z-high",     { z-index: 10; }, @min );
    .media-select( ~"@{cl}z-middle",   { z-index: 5; }, @min );
    .media-select( ~"@{cl}z-low",      { z-index: 1; }, @min );
    .media-select( ~"@{cl}z-normail",  { z-index: 0; }, @min );
    .media-select( ~"@{cl}z-floor",    { z-index: -1; }, @min );

    .stu ( @struct, @struct-short ) {
        @cl2: ~" ";
        @range: 1;
        ._stu ( @struct, @struct-short, @cl2, @range );
    }

    .stu ( @struct, @struct-short, @cl2, @range ) {
        @_cl2: ~"-@{cl2}";
        ._stu ( @struct, @struct-short, @_cl2, @range );
    }

    ._stu ( @struct, @struct-short, @cl2, @range ) {
        .media-select( ~"@{cl}@{struct}@{cl2}", { @{struct}: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct-short}@{cl2}", { @{struct}: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct}-left@{cl2}", { @{struct}-left: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct-short}-lt@{cl2}", { @{struct}-left: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct}-right@{cl2}", { @{struct}-right: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct-short}-rt@{cl2}", { @{struct}-right: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct}-top@{cl2}", { @{struct}-top: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct-short}-tp@{cl2}", { @{struct}-top: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct}-bottom@{cl2}", { @{struct}-bottom: @pd * @range }, @min );
        .media-select( ~"@{cl}@{struct-short}-bt@{cl2}", { @{struct}-bottom: @pd * @range }, @min );
    }

    .stu( padding, pd, no, 0 );
    .stu( padding, pd, quarter, .25 );
    .stu( padding, pd, half, .5 );
    .stu( padding, pd );
    .stu( padding, pd, x2, 2 );
    .stu( padding, pd, x4, 4 );
    .stu( padding, pd, x8, 8 );
    .stu( padding, pd, x16, 16 );
   
    .stu( margin, mg, no, 0 );
    .stu( margin, mg, quarter, .25 );
    .stu( margin, mg, half, .5 );
    .stu( margin, mg );
    .stu( margin, mg, x2, 2 );
    .stu( margin, mg, x4, 4 );
    .stu( margin, mg, x8, 8 );
    .stu( margin, mg, x16, 16 );

    
    .stu_bd ( @struct, @struct-short ) {
        @cl2: ~" ";
        @style: solid;
        @color: @gray;
        @width: 1px;
        ._stu_bd ( @struct, @struct-short, @cl2, @width, @style, @color );
    }

    .stu_bd ( @struct, @struct-short, @cl2, @width ) {
        @style: solid;
        @color: @gray;
        @_cl2: ~"-@{cl2}";
        ._stu_bd ( @struct, @struct-short, @_cl2, @width, @style, @color );
    }

    .stu_bd ( @struct, @struct-short, @cl2, @width, @style, @color ) {
        @_cl2: ~"-@{cl2}";
        ._stu_bd ( @struct, @struct-short, @_cl2, @width, @style, @color );
    }

    ._stu_bd ( @struct, @struct-short, @cl2, @width, @style, @color ) {
        .media-select( ~"@{cl}@{struct}@{cl2}" { @{struct}: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct-short}@{cl2}" { @{struct}: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct}-left@{cl2}" { @{struct}-left: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct-short}-lt@{cl2}" { @{struct}-left: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct}-right@{cl2}" { @{struct}-right: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct-short}-rt@{cl2}" { @{struct}-right: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct}-top@{cl2}" { @{struct}-top: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct-short}-tp@{cl2}" { @{struct}-top: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct}-bottom@{cl2}" { @{struct}-bottom: @width @style @color; }, @min );
        .media-select( ~"@{cl}@{struct-short}-bt@{cl2}" { @{struct}-bottom: @width @style @color; }, @min );
    }

    .stu_bd( border, bd );
    .stu_bd( border, bd, x2, @pd * 2 );
    .stu_bd( border, bd, x4, @pd * 4 );
    .stu_bd( border, bd, x8, @pd * 8 );
    .stu_bd( border, bd, x16, @pd * 16 );
    .stu_bd( border, bd, no, 0 );

    .stu_bd( outline, ot );
    .stu_bd( outline, ot, x2, @pd * 2 );
    .stu_bd( outline, ot, x4, @pd * 4 );
    .stu_bd( outline, ot, x8, @pd * 8 );
    .stu_bd( outline, ot, x16, @pd * 16 );
    .stu_bd( outline, ot, no, 0 );

    // border type
    .media-select( ~"@{cl}solid", { border-style: solid; }, @min );
    .media-select( ~"@{cl}dotted", { border-style: dotted; }, @min );
    .media-select( ~"@{cl}dashed", { border-style: dashed; }, @min );


    .media-select( ~"@{cl}radius-no", { border-radius: 0; }, @min );
    .media-select( ~"@{cl}radius", { border-radius: @radius; }, @min );
    .media-select( ~"@{cl}circle", { border-radius: 50%; }, @min );

    // float;
    // If your project has been run into modern browser like Chrome or Firfox, just replace flex box by float as far as you can.
    .media-select( ~"@{cl}pl-lt", { float: left; }, @min );
    .media-select( ~"@{cl}pull-left", { float: left; }, @min );
    .media-select( ~"@{cl}pl-rt", { float: right; }, @min );
    .media-select( ~"@{cl}pull-right", { float: right; }, @min );
    .media-select( ~"@{cl}cl-lt", { clear: left; }, @min );
    .media-select( ~"@{cl}clear-left", { clear: left; }, @min );
    .media-select( ~"@{cl}cl-rt", { clear: right; }, @min );
    .media-select( ~"@{cl}clear-right", { clear: right; }, @min );
    .media-select( ~"@{cl}cl-bt", { clear: both; }, @min );
    .media-select( ~"@{cl}clear-both", { clear: both; }, @min );
    .media-select( ~"@{cl}clearfix", {
        &:after {
            content: "";
            display: table;
            clear: both;
        }
    }, @min );

    // width;
    // The importent things is that the width included padding but not have margin.
    .media-select( ~"@{cl}auto", { width: auto; }, @min );
    .media-select( ~"@{cl}w-auto", { width: auto; }, @min );
    .media-select( ~"@{cl}full", { width: 100%; }, @min );
    .media-select( ~"@{cl}w-full", { width: 100%; }, @min );
    .media-select( ~"@{cl}half", { width: 50%; }, @min );
    .media-select( ~"@{cl}w-half", { width: 50%; }, @min );
    .media-select( ~"@{cl}quarter", { width: 25%; }, @min );
    .media-select( ~"@{cl}w-quarter", { width: 25%; }, @min );
    .media-select( ~"@{cl}third", { width: 33.3333333%; }, @min );
    .media-select( ~"@{cl}w-third", { width: 33.3333333%; }, @min );

    // height;
    // unfrequently
    .media-select( ~"@{cl}h-auto", { height: auto; }, @min );
    .media-select( ~"@{cl}h-full", { height: 100%; }, @min );           // ...except me;
    .media-select( ~"@{cl}h-half", { height: 50%; }, @min );
    .media-select( ~"@{cl}h-quarter", { height: 25%; }, @min );
    .media-select( ~"@{cl}h-third", { height: 33.3333333%; }, @min );

    .width-calc( @cp ) {
        width: ~"-webkit-calc(@{cp})";
        width: ~"calc(@{cp})";
    }

    // overflow;
    .media-select( ~"@{cl}of-hd", { overflow: hidden; }, @min );
    .media-select( ~"@{cl}overflow-hidden", { overflow: hidden; }, @min );
    .media-select( ~"@{cl}of-ot", { overflow: auto; }, @min );
    .media-select( ~"@{cl}overflow-auto", { overflow: auto; }, @min );
    .media-select( ~"@{cl}of-sl", { overflow: scroll; }, @min );
    .media-select( ~"@{cl}overflow-scroll", { overflow: scroll; }, @min );

    // box shadow
    .media-select( ~"@{cl}shadow-none", { box-shadow: none; }, @min );

    // text decoration
    .media-select( ~"@{cl}udl", {
        &, &:hover, &:active, &:focus {
            text-decoration: underline;
        }
    }, @min );
    .media-select( ~"@{cl}orl", {
        &, &:hover, &:active, &:focus {
            text-decoration: overline;
        }
    }, @min );
    .media-select( ~"@{cl}thl", {
        &, &:hover, &:active, &:focus {
            text-decoration: line-through;
        }
    }, @min );
    .media-select( ~"@{cl}nl", {
        &, &:hover, &:active, &:focus {
            text-decoration: none;
        }
    }, @min );

    // font weight
    .media-select( ~"@{cl}lighter", {
        font-weight: lighter;
    }, @min );
    .media-select( ~"@{cl}normal", {
        font-weight: normal;
    }, @min );
    .media-select( ~"@{cl}bold", {
        font-weight: bold;
    }, @min );

    .stu_font( @size ) when ( @size >= 8 ) {
        .media-select( ~"@{cl}font-@{size}", {
            font-size: ~"@{size}px";
        }, @min );

        .stu_font( @size - 2 );
    }

    .stu_font( 50 );
}

.make-classes();
.make-classes( mxs, @m-xs );
.make-classes( ms, @m-s );
.make-classes( mm, @m-m );
.make-classes( ml, @m-l );
.make-classes( mxl, @m-xl );
.make-classes( xs, @xs );
.make-classes( s, @s );
.make-classes( m, @m );
.make-classes( l, @l );
.make-classes( xl, @xl );

.user-media-select( @value, @min ) when( @min <= 0 ) {
    @value();
}
.user-media-select( @value, @min ) when( @min > 0 ) {
    @media screen and ( min-width: @min ) {
        @value();
    }
}

.mxs( @value ) { .user-media-select( @value, @m-xs ); }
.ms( @value ) { .user-media-select( @value, @m-s ); }
.mm( @value ) { .user-media-select( @value, @m-m ); }
.ml( @value ) { .user-media-select( @value, @m-l ); }
.mxl( @value ) { .user-media-select( @value, @m-xl ); }
.xs( @value ) { .user-media-select( @value, @xs ); }
.s( @value ) { .user-media-select( @value, @s ); }
.m( @value ) { .user-media-select( @value, @m ); }
.l( @value ) { .user-media-select( @value, @l ); }
.xl( @value ) { .user-media-select( @value, @xl ); }

